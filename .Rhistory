?simplex
a <- c(1,0,0,0)
A2 = matr(c(1,1,1,0,1,1,0,1,1,0,1,1), ncol=4, nrow=3)
A2 = matrix(c(1,1,1,0,1,1,0,1,1,0,1,1), ncol=4, nrow=3)
A2
a <- c(1,0,0,0)
A2 = matrix(c(1,1,1,1,1,0,1,0,1,0,1,1), ncol=4, nrow=3)
A2
b2 <- c(1/3, 2/3, 2/3)
b2
A3 <- matr(c(0,1,1,1), ncol=4, nrow=1)
A3
A3 <- matrix(c(0,1,1,1), ncol=4, nrow=1)
A3
b3 <- c(1)
b3
simplex(a = a, A2 = A2, b2 = b2, A3 = A3, b3 = b3,
maxi = FALSE)
library(linprog)
install.packages("linprog")
Amat <- rbind( c(1,1,1,0),
c(1,1,0,1),
c(1,0,1,1),
c(0,1,1,1))
Amat
bvec <- c(1/3, 2/3, 2/3,1)
bvec
bvec
abs(bvec)
abs(Amat)
solveLP( cvec, bvec, Amat, const.dir = c( ">=", ">=", ">=", "==" ) )
library(linprog)
cvec <- c(1,0,0,0)
Amat <- rbind( c(1,1,1,0),
c(1,1,0,1),
c(1,0,1,1),
c(0,1,1,1))
abs(Amat)
Amat
bvec <- c(1/3, 2/3, 2/3,1)
bvec
abs(bvec)
solveLP( cvec, bvec, Amat, const.dir = c( ">=", ">=", ">=", "==" ) )
solveLP( cvec, bvec, Amat, const.dir = c( ">=", ">=", ">=", "==" ), lpSolve="TRUE")
solveLP( cvec, bvec, Amat, const.dir = c( ">=", ">=", ">=", "==" ), lpSolve=TRUE)
cvec <- c(1,-1,0,0,0)
Amat <- rbind( c(1,-1,1,1,0),
c(1,-1,1,0,1),
c(1,-1,0,1,1),
c(0,0,1,1,1))
abs(Amat)
Amat
bvec <- c(1/3, 2/3, 2/3,1)
bvec
abs(bvec)
solveLP( cvec, bvec, Amat, const.dir = c( ">=", ">=", ">=", "==" ), lpSolve=TRUE)
2/9
5/9
1/9
cvec <- c(1,-1,0,0,0)
Amat <- rbind( c(1,-1,1,1,0),
c(1,-1,1,0,1),
c(1,-1,0,1,1),
c(0,0,1,1,1))
abs(Amat)
Amat
bvec <- c(3/4, 3/4, 3/4, 1)
bvec
abs(bvec)
solveLP( cvec, bvec, Amat, const.dir = c( ">=", ">=", ">=", "==" ), lpSolve=TRUE)
3/4
1/16
1/13
1/12
cvec <- c(1,-1,0,0,0)
Amat <- rbind( c(1,-1,1,1,0),
c(1,-1,1,0,1),
c(1,-1,0,1,1),
c(0,0,1,1,1))
bvec <- c(3/4, 3/4, 3/4, 1)
solveLP( cvec, bvec, Amat, const.dir = c( ">=", ">=", ">=", "==" ), lpSolve=TRUE)
library(linprog)
cvec <- c(1,-1,0,0,0)
Amat <- rbind( c(1,-1,1,1,0),
c(1,-1,1,0,1),
c(1,-1,0,1,1),
c(0,0,1,1,1))
bvec <- c(3/4, 3/4, 3/4, 1)
solveLP( cvec, bvec, Amat, const.dir =
c( ">=", ">=", ">=", "==" ), lpSolve=TRUE)
library(linprog)
cvec <- c(1,-1,0,0,0)
Amat <- rbind( c(1,-1,1,1,0),
c(1,-1,1,0,1),
c(1,-1,0,1,1),
c(0,0,1,1,1))
bvec <- c(3/4, 3/4, 3/4, 1)
solveLP( cvec, bvec, Amat, const.dir =
c( ">=", ">=", ">=", "==" ), lpSolve=TRUE)
library(linprog)
cvec <- c(1,-1,0,0,0)
Amat <- rbind( c(1,-1,1,1,0),
c(1,-1,1,0,1),
c(1,-1,0,1,1),
c(0,0,1,1,1))
bvec <- c(4/5, 1/10, 1/10, 1)
solveLP( cvec, bvec, Amat, const.dir =
c( ">=", ">=", ">=", "==" ), lpSolve=TRUE)
help(lsa)
library(lsa)
library(lsa)
install.packages("lsa")
library(lsa)
help(lsa)
rep(1,10)
c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
hist(d)
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
hist(d, breaks=100)
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(-2,2)))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(-2,6)))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5)))
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5)))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=100))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=30))
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10),rep(5,10), rep(6,10), rep(7,10),rep(8,10),
rep(9,10), rep(10,10), rep(11,10),rep(12,10),rep(13,10), rep(14,10), rep(15,10),rep(16,10))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=30))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=100))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,20), breaks=100))
d <- c(rep(1,5), rep(2,10), rep(3,7),rep(4,8),rep(5,3), rep(6,15), rep(7,9),rep(8,8),
rep(9,4), rep(10,11), rep(11,12),rep(12,11),rep(13,5), rep(14,9), rep(15,6),rep(16,10))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,20), breaks=100))
d <- c(rep(1,10), rep(2,10), rep(3,10),rep(4,10))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=30))
d <- c(rep(1,5), rep(2,10), rep(3,8),rep(4,13))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=30))
hist(d, breaks=100)
d <- c(rep(1,5), rep(2,10), rep(3,8),rep(4,13))
utils::str(hist(d, col = "gray", labels = TRUE, xlim = range(0,5), breaks=30))
unif <- runif(n, min = 0, max = 1)
n=10000
unif <- runif(n, min = 0, max = 1)
x <- - log(unif)
x <- -log(unif)
hist(x)
hist(x, breaks=1000)
help(hist)
hist(x, freq=F)
hist(x, breaks=1000, freq=F)
hist(x, breaks=1000, freq=T)
hist(x, breaks=1000, freq=F)
dev.new()
hist(x, breaks=1000, freq=F)
n=100000
unif <- runif(100000, min = 0, max = 1)
x <- -log(unif)
dev.new()
hist(x, breaks=1000, freq=F)
unif <- runif(1000000, min = 0, max = 1)
x <- -log(unif)
dev.new()
hist(x, breaks=1000, freq=F)
mu <- 5
beta <- 2
unif <- runif(10000, min = 0, max = 1)
x <- mu - beta*log(1/unif - 1)
dev.new()
hist(x, breaks=1000, freq=F)
dev.new()
par(mfrow=c(1,2))
hist(x, breaks=1000, freq=F)
help(rlogis)
n <- 10000
mu <- 5
beta <- 2
unif <- runif(n, min = 0, max = 1)
x <- mu - beta*log(1/unif - 1)
dev.new()
par(mfrow=c(1,2))
hist(x, breaks=1000, freq=F)
rlogis(n, location = mu, scale = beta)
plot(rlogis(n, location = mu, scale = beta))
dev.new()
par(mfrow=c(1,2))
hist(x, breaks=1000, freq=F)
hist(rlogis(n, location = mu, scale = beta))
dev.new()
par(mfrow=c(1,2))
hist(x, breaks=1000, freq=F)
hist(rlogis(n, location = mu, scale = beta), breaks=1000, freq=F)
Pi
PI
pi
n <- 10000
mu <- 0
sigma <- 0.5
unif <- runif(n, min = 0, max = 1)
x <- mu + sigma * tan(pi(unif-0.5))
x <- mu + sigma * tan(pi*(unif-0.5))
dev.new()
par(mfrow=c(1,2))
hist(x, breaks=1000, freq=F)
hist(rcauchy(n, location = mu, scale = beta), breaks=1000, freq=F)
sigma <- 2
unif <- runif(n, min = 0, max = 1)
x <- mu + sigma * tan(pi*(unif-0.5))
dev.new()
par(mfrow=c(1,2))
hist(x, breaks=1000, freq=F)
hist(rcauchy(n, location = mu, scale = beta), breaks=1000, freq=F)
hist(x)
hist(x, breaks=1000, freq=F)
hist(rcauchy(n, location = mu, scale = beta), breaks=1000, freq=F)
n <- 10000
mu <- 0
sigma <- 2
unif <- runif(n, min = 0, max = 1)
x <- mu + sigma * tan(pi*(unif-0.5))
dev.new()
par(mfrow=c(1,2))
hist(x, breaks=1000, freq=F)
hist(rcauchy(n, location = mu, scale = sigma), breaks=1000, freq=F)
help("hist")
x[x>-10 & x < 10]
x <- mu + sigma * tan(pi*(unif-0.5))
x <- x[x>-10 & x < 10]
dev.new()
hist(x, breaks=1000, freq=F)
n <- 10000
mu <- 0
sigma <- 2
unif <- runif(n, min = 0, max = 1)
x <- mu + sigma * tan(pi*(unif-0.5))
x <- x[x>-10 & x < 10]
dev.new()
par(mfrow=c(1,2))
hist(x, breaks=1000, freq=F)
c <- rcauchy(n, location = mu, scale = sigma)
c <- c[c>-10 & c < 10]
hist(c, breaks=1000, freq=F)
liks <- sapply(c(10,20,50,100, 200), function(k) plsaEM(K=k, m_tf, iter = 20))
setwd('C:/doc/s/sem2/chudy/plsa')
source('../repo/pub_lda/preprocessing.R')
source('../repo/pub_lda/dimRed.R')
source('../repo/pub_lda/classification.R')
source('../repo/pub_lda/choose_model.R')
source('../repo/pub_lda/validation.R')
source('./plsa_em.R')
topic_number <- 10
filePath = 'C:/doc/s/sem2/chudy/repo/pub_lda/apps_desc.csv'
data <- read.csv(filePath, sep=";")
dim(data)
dataAll <- cleanData(data)
rm(data)
labelMapping <- data.frame(label = c("ANDROID_TOOL", "KEYBOARD", "GAME", "NONE", "WIDGET", "USE_INTERNET",
"DOCUMENT_EDITOR", "LOCATE_POSITION", "APP_LIBRARY", "INTERNET_BROWSER",
"MESSAGING", "WALLPAPER", "WEATHER", "USE_CONTACTS", "BACKUP", "WORKOUT_TRACKING",
"CALENDAR", "MONEY", "GPS_NAVIGATION", "FLASHLIGHT", "HOME_LOCK_SCREEN",
"SMS", "JOB_SEARCH", "EBANKING", "CONTACT_MANAGER"), label = c(0:24))
dataAllLabelsNumeric <- labelsToNumeric(dataAll, labelMapping)
rm(labelMapping)
names(dataAllLabelsNumeric)[names(dataAllLabelsNumeric) == "label.1"] = "label"
dim(dataAllLabelsNumeric)
partitioned <- partitionData(dataAllLabelsNumeric)
rm(dataAllLabelsNumeric)
dim(partitioned$train)
dim(partitioned$test)
tfidfData <- prepareTfIdfWithLabels(partitioned, sparseLevel=0.98)
rm(partitioned)
tf <- t(tfidfData$cleanedTrainMatrix)
tf
dim(tf)
M <- dim(tf)[2]
V <- dim(tf)[1]
M
V
K <- topic_number
K
m_tf <- as.matrix(tf)
rm(tf)
rm(tfidfData)
liks <- sapply(c(10,20,50,100, 200), function(k) plsaEM(K=k, m_tf, iter = 20))
plot(c(10,20,50,100, 200), liks)
plsaEM(K=300, m_tf, iter = 5)
l300 <- plsaEM(K=300, m_tf, iter = 5)
l300 <- plsaEM(K=300, m_tf, iter = 20)
liks_300 = c(liks, l300)
liks
liks
liks_300
liks_with_300 = c(liks, l300)
plot(c(10,20,50,100, 200, 300), liks_with_300)
rbinom(10, size=numberOfTrials, prob = probabilityOfSuccess)
numberOfTrials <- 10
probabilityOfSuccess <- 0.3
rbinom(10, size=numberOfTrials, prob = probabilityOfSuccess)
rbinom(1, size=numberOfTrials, prob = probabilityOfSuccess)
rbinom(1, size=numberOfTrials, prob = probabilityOfSuccess)
rbinom(1, size=numberOfTrials, prob = probabilityOfSuccess)
help(rbeta)
nBin <- 10
thetaBin <- 0.3
aBeta <- 2
bBeta <- 5
nIterations = 5000
theta <- rep(0,nIterations+1)
x <- rep(0,nIterations+1)
theta[1] <- rbeta(n=1, shape1 = aBeta, shape2 = bBeta)
x[1] <- rbinom(n=1, size=nBin, prob = theta[1])
for(i in 2:nIterations){
theta[i] <- rbeta(n=1, shape1 = x[i-1]+aBeta, shape2 = nBin - x[i-1] + bBeta)
x[i] <- rbinom(n=1, size=nBin, prob = theta[i])
}
x
hist(x)
hist(rbeta(nIterations, aBeta, bBeta))
hist(x)
hist(theta)
hist(rbeta(nIterations, aBeta, bBeta))
rbetabinom(10,10,aBeta, bBeta)
library(rmutil)
install.packages("rmutil")
library(rmutil)
rbetabinom(10,10,aBeta, bBeta)
hist(theta)
hist(x)
hist(x, breaks = 1000)
hist(x, breaks = 100)
hist(x, breaks = 50)
help(choose)
betabi(1,aBeta, bBeta, nBin)
betabi <- function(x,a,b,n){
commonCoeff <- choose(n,x)*gamma(a+b)/(gamma(a)*gamma(b))
first <- 1/(x+a)
second <- 1/(a+b+n-1)
commonCoeff * (first - second)
}
betabi(1,aBeta, bBeta, nBin)
betabi(2,aBeta, bBeta, nBin)
hist(x, breaks = 50)
help(curve)
curve(betabi, xlim = c(0, 10), xname = "t")
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "t")
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "x")
warnings()
hist(x, breaks = 50)
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "x")
hist(x, breaks = 50)
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "x")
hist(x, breaks = 50)
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "x")
hist(x, breaks = 50)
par(new=TRUE)
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "x")
warnings()
betabi <- function(x,a,b,n){
commonCoeff <- choose(n,floor(x))*gamma(a+b)/(gamma(a)*gamma(b))
first <- 1/(x+a)
second <- 1/(a+b+n-1)
commonCoeff * (first - second)
}
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "x")
betabi <- function(x,a,b,n){
commonCoeff <- choose(n,ceiling(x))*gamma(a+b)/(gamma(a)*gamma(b))
first <- 1/(x+a)
second <- 1/(a+b+n-1)
commonCoeff * (first - second)
}
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "x")
hist(x, breaks = 50)
par(new=TRUE)
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "x")
nIterations = 10000
theta <- rep(0,nIterations+1)
x <- rep(0,nIterations+1)
theta[1] <- rbeta(n=1, shape1 = aBeta, shape2 = bBeta)
x[1] <- rbinom(n=1, size=nBin, prob = theta[1])
for(i in 2:nIterations){
theta[i] <- rbeta(n=1, shape1 = x[i-1]+aBeta, shape2 = nBin - x[i-1] + bBeta)
x[i] <- rbinom(n=1, size=nBin, prob = theta[i])
}
x
hist(theta)
hist(rbeta(nIterations, aBeta, bBeta))
hist(x, breaks = 50)
hist(x[-5000], breaks = 50)
nIterations = 10000
theta <- rep(0,nIterations+1)
x <- rep(0,nIterations+1)
theta[1] <- rbeta(n=1, shape1 = aBeta, shape2 = bBeta)
x[1] <- rbinom(n=1, size=nBin, prob = theta[1])
for(i in 2:nIterations){
x[i] <- rbinom(n=1, size=nBin, prob = theta[i-1])
theta[i] <- rbeta(n=1, shape1 = x[i]+aBeta, shape2 = nBin - x[i] + bBeta)
}
x
hist(theta)
hist(rbeta(nIterations, aBeta, bBeta))
hist(x[-5000], breaks = 50)
nBin <- 15
aBeta <- 3
bBeta <- 7
nIterations = 10000
theta <- rep(0,nIterations+1)
x <- rep(0,nIterations+1)
theta[1] <- rbeta(n=1, shape1 = aBeta, shape2 = bBeta)
x[1] <- rbinom(n=1, size=nBin, prob = theta[1])
for(i in 2:nIterations){
x[i] <- rbinom(n=1, size=nBin, prob = theta[i-1])
theta[i] <- rbeta(n=1, shape1 = x[i]+aBeta, shape2 = nBin - x[i] + bBeta)
}
x
hist(theta)
hist(rbeta(nIterations, aBeta, bBeta))
hist(x[-5000], breaks = 50)
betabi <- function(x,a,b,n){
commonCoeff <- choose(n,ceiling(x))*gamma(a+b)/(gamma(a)*gamma(b))
first <- 1/(x+a)
second <- 1/(a+b+n-1)
commonCoeff * (first - second)
}
betabi(2,aBeta, bBeta, nBin)
hist(x, breaks = 50)
par(new=TRUE)
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "x")
theta <- rep(0,nIterations+1)
x <- rep(0,nIterations+1)
theta[1] <- rbeta(n=1, shape1 = aBeta, shape2 = bBeta)
x[1] <- rbinom(n=1, size=nBin, prob = theta[1])
for(i in 2:nIterations){
x[i] <- rbinom(n=1, size=nBin, prob = theta[i-1])
theta[i] <- rbeta(n=1, shape1 = x[i]+aBeta, shape2 = nBin - x[i] + bBeta)
}
hist(x, breaks = 50)
betabi <- function(x,a,b,n){
commonCoeff <- choose(n,ceiling(x))*gamma(a+b)/(gamma(a)*gamma(b))
first <- 1/(x+a)
second <- 1/(a+b+n-1)
commonCoeff * (first - second)
}
par(new=TRUE)
curve(betabi(x,aBeta, bBeta, nBin), xlim = c(0, 10), xname = "x")
help(curve)
curve(betabi(x,aBeta, bBeta, nBin), from=0, to=12, n=13, xname = "x")
hist(x, breaks = 50)
par(new=TRUE)
curve(betabi(x,aBeta, bBeta, nBin), from=0, to=12, n=13, xname = "x")
nBin <- 15
aBeta <- 3
bBeta <- 7
nIterations = 10000
theta <- rep(0,nIterations+1)
x <- rep(0,nIterations+1)
theta[1] <- rbeta(n=1, shape1 = aBeta, shape2 = bBeta)
x[1] <- rbinom(n=1, size=nBin, prob = theta[1])
for(i in 2:nIterations){
x[i] <- rbinom(n=1, size=nBin, prob = theta[i-1])
theta[i] <- rbeta(n=1, shape1 = x[i]+aBeta, shape2 = nBin - x[i] + bBeta)
}
x
hist(theta)
hist(rbeta(nIterations, aBeta, bBeta))
betabi <- function(x,a,b,n){
commonCoeff <- choose(n,ceiling(x))*gamma(a+b)/(gamma(a)*gamma(b))
first <- 1/(x+a)
second <- 1/(a+b+n-1)
commonCoeff * (first - second)
}
hist(x, breaks = 50)
par(new=TRUE)
curve(betabi(x,aBeta, bBeta, nBin), from=0, to=12, n=13, xname = "x")
hist(x, breaks = 50)
source('C:/doc/s/sem2/chudy/lda_gibbs/lda_gibbs.R', echo=TRUE)
hist(x, breaks = 50)
par(new=TRUE)
curve(betabi(x,aBeta, bBeta, nBin), from=0, to=12, n=13, xname = "x")
hist(x[-5000], breaks = 50)
par(new=TRUE)
curve(betabi(x,aBeta, bBeta, nBin), from=0, to=12, n=13, xname = "x")
nBin <- 15
aBeta <- 3
bBeta <- 7
nIterations = 10000
theta <- rep(0,nIterations+1)
x <- rep(0,nIterations+1)
theta[1] <- rbeta(n=1, shape1 = aBeta, shape2 = bBeta)
x[1] <- rbinom(n=1, size=nBin, prob = theta[1])
for(i in 2:nIterations){
x[i] <- rbinom(n=1, size=nBin, prob = theta[i-1])
theta[i] <- rbeta(n=1, shape1 = x[i]+aBeta, shape2 = nBin - x[i] + bBeta)
}
x
hist(theta)
hist(rbeta(nIterations, aBeta, bBeta))
betabi <- function(k,a,b,n){
#commonCoeff <- choose(n,ceiling(x))*gamma(a+b)/(gamma(a)*gamma(b))
#first <- 1/(x+a)
#second <- 1/(a+b+n-1)
#commonCoeff * (first - second)
(gamma(n+1)/(gamma(k+1) * gamma(n-k+1))) * (gamma(k+a) * gamma(n-k+b))/gamma(n+a+b) * (gamma(a+b)/(gamma(a) * gamma(b)))
}
hist(x[-5000], breaks = 50)
par(new=TRUE)
curve(betabi(x,aBeta, bBeta, nBin), from=0, to=12, n=13, xname = "x")
curve(betabi(x,aBeta, bBeta, nBin), from=0, to=12, n=10, xname = "x")
hist(x[-5000], breaks = 50)
par(new=TRUE)
curve(betabi(x,aBeta, bBeta, nBin), from=0, to=12, n=10, xname = "x")
